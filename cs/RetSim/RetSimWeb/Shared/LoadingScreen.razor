@if (isLoaded)
{
    @ChildContent
}
else
{
    <div>Loading screen...</div>
}

@code {
    @using System;
    @using System.Net;
    @using System.Net.Http.Json
    @using RetSim.Items;
    @inject HttpClient httpClient

    bool isLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItemData(); 
        isLoaded = true;
    }

    async Task LoadItemData()
    {
        RetSim.Data.Items.Initialize(await LoadWeponData(), await  LoadArmorData(), await LoadSetData(), await LoadGemData(), await LoadMetaGemData());
    }

    public Task<List<EquippableWeapon>> LoadWeponData()
    {
        return httpClient.GetFromJsonAsync<List<EquippableWeapon>>("https://raw.githubusercontent.com/TheSorm/RetSim/main/data/weapons.json");
    }

    public Task<List<EquippableItem>> LoadArmorData()
    {
        return httpClient.GetFromJsonAsync<List<EquippableItem>>("https://raw.githubusercontent.com/TheSorm/RetSim/main/data/armor.json");
    }

    public Task<List<ItemSet>> LoadSetData()
    {
        return httpClient.GetFromJsonAsync<List<ItemSet>>("https://raw.githubusercontent.com/TheSorm/RetSim/main/data/sets.json");
    }

    public Task<List<Gem>> LoadGemData()
    {
        return httpClient.GetFromJsonAsync<List<Gem>>("https://raw.githubusercontent.com/TheSorm/RetSim/main/data/gems.json");
    }

    public Task<List<MetaGem>> LoadMetaGemData()
    {
        return httpClient.GetFromJsonAsync<List<MetaGem>>("https://raw.githubusercontent.com/TheSorm/RetSim/main/data/metaGems.json");
    }
}